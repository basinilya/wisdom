Q: Screen grab
A:
  Install UScreenCapture
  Install Virtual Audio Cable (lite) https://vac.muzychenko.net/en/index.htm

  ffmpeg -list_devices true -f dshow -i dummy | iconv -f utf-8 -t cp866
  ffmpeg -hide_banner -y -f dshow -thread_queue_size 1024 -i video="UScreenCapture" -f dshow -channel_layout stereo -thread_queue_size 1024 -i audio="à¯¤ (Realtek High Definiti" -f dshow -channel_layout stereo -thread_queue_size 1024 -i audio="Line 1 (Virtual Audio Cable)" -filter_complex amix=inputs=2 -c:a aac -ac 2 -b:a 128k -c:v libx264 -preset ultrafast -tune zerolatency -movflags +faststart output.mp4

  Record without audio

  ffmpeg -hide_banner -y -f dshow -thread_queue_size 1024 -i video="UScreenCapture" -c:v libx264 -preset ultrafast -tune zerolatency -movflags +faststart output.mp4


  Problems:
  unlike mkv, mp4 requires graceful shutdown of ffmpeg otherwise you get "moov atom not found" when you try to play an incomplete mp4 file.
  the video delay in the output file is huge: ~1000ms 

Q: no logo
A: -hide_banner

Q: Scene detection
A:
https://stackoverflow.com/a/38205105/447503

Combining the scene filter (for detecting scene changes) and the showinfo filter should achieve what you want:

    ffmpeg -i input.flv  \
           -filter:v "select='gt(scene,0.4)',showinfo" \
           -f null \
           - 2> ffout

This command extracts all frames that differ from the previous frame by more than (gt) 0.4 (on a scale from 0 to 1). For these frames, information is printed out (showinfo) like this       

    [Parsed_showinfo_1 @ 0x2d85e60] n:   0 pts:2537204 pts_time:2.5372  pos:  2998114 fmt:rgb24 sar:1/1 s:1920x1200 i:P iskey:1 type:I checksum:5616582E plane_checksum:[5616582E]

Now you only have to extract the timestamp. I think you're interested in pts_time. You could do it like this:

    grep showinfo ffout | grep pts_time:[0-9.]* -o | grep [0-9.]* -o > timestamps

This will give you the list of all timestamps:

    2.5372
    4.37799
    6.65301
    8.09344

For this approach to work, you must have a version of FFmpeg that implements the scene detection. Also, you have to select a suitable value for the threshold (0.4 in the first command). You can try to find an optimal threshold by extracting frames for different thresholds (and afterwards examine the frames manually) like this

    ffmpeg -i input.flv \
           -filter:v "select='gt(scene,0.1)',showinfo" \
           -vsync 0 frames/%05d.jpg
       

I don't have the rep to post a comment on the above answer but I wanted to point out that the grep posted by both @ckoehn and @keypulsations will only grab timestamps which are floating point. To grab both floating point and integer timestamps use the following regex

    grep showinfo ffout | grep pts_time:[0-9.]* -o | grep -E '[0-9]+(?:\.[0-9]*)?' -o > timestamps

You can simply use the command:

ffmpeg inputvideo.mp4 -filter_complex "select='gt(scene,0.3)',metadata=print:file=time.txt" -vsync vfr img%03d.png

This will save just the relevant information in the time.txt file like below.

    frame:0    pts:108859  pts_time:1.20954
    lavfi.scene_score=0.436456
    frame:1    pts:285285  pts_time:3.16983
    lavfi.scene_score=0.444537


Q: remove audio track
A: ffmpeg -i example.mkv -c copy -an example-nosound.mkv

Q: create video of images
A: ffmpeg -framerate 5 -i img-%02d.png video.avi

Q: create gif
A: 
  set -- out2.mp4 out2.gif
  filters=fps=25,scale=320:-1:flags=lanczos
  ffmpeg -y -v warning -i $1 -vf "$filters${filters:+,}palettegen" ${palette:-palette.png}
  ffmpeg -y -v warning -i $1 -i ${palette:-palette.png} -lavfi "$filters [x]; [x][1:v] paletteuse" $2
  
  w/o filters:
  ffmpeg -y -v warning -i $1 -vf "palettegen" ${palette:-palette.png}
  ffmpeg -y -v warning -i $1 -i ${palette:-palette.png} -lavfi "[0:v][1:v] paletteuse" $2
  ffmpeg -y -v warning -i $1 -i ${palette:-palette.png} -lavfi "paletteuse" $2

Q: grab screen (capture desktop) on Windows
A: sleep 3 && ffmpeg -y -f gdigrab -framerate 25 -offset_x 100 -offset_y 100 -video_size 640x480 -show_region 1 -i desktop -c:v huffyuv out2.avi


======== create audio CD image with imgburn =============
- create wav files out of mp3 files:
ex: ffmpeg -y -i test.mp3 -ar 44100 -ac 2 -acodec pcm_s16le test.wav

- in imgburn switch to write mode
- press small button "create CUE file" in the center of the window
- add tracks (all wav files, CD-audio format, important for mounting)
- press ok and save
- exit write mode

Now you have a wav/cue file which is image and can be mounted with daemon tools!


To create a single bin/cue file
(Although in build mode ImgBurn recognizes the cue file as an image file, it then creates a data cd containing the cue file itself instead of an audio cd with the tracks.)
Instead:
- mount wav/cue file with daemon tools
- in imgburn switch to read mode
- save as *.bin (cue file created automatically)

======== END create audio CD image with imgburn =============
