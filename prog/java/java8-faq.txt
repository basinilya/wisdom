Q: extract a page (range) from a stream
A: skip(), then limit()

Q: void functional interface with no argument
A: Runnable

Q:
A:
    public interface MethodGetter {
        String getMethod();
    }
    
    // non-static getter method refernce is a Function that accepts 'this'
    public static <T extends MethodGetter> String getMethodName(T mock, final Function<T, ?> getter) {
        getter.apply( mock );
        return mock.getMethod();
    }

    class X extends FooBean implements MethodGetter {
        String name;
        @Override
        public Object getX()
        {
            name = "TODO: find out method name";
            return null;
        }
        @Override
        public String getMethod()
        {
            return name;
        }
    }

    X mock = new X();
    String s = getMethodName(mock, FooBean::getX);


java 8
Lambdas, method::references
default methods
java.util.function
java.util.stream


Lamdas example:

Arrays.asList("a", "b").stream().forEach((String s) -> { System.out.println(s);});
Arrays.asList("a", "b").stream().forEach(s -> { System.out.println(s);});
Arrays.asList("a", "b").stream().forEach(s -> System.out.println(s));


the following is not needed, use Stream.toArray
    public static <T> Collector<T, //
        ?, // NOSONAR
        T[]> toArrayCollector3(final Supplier<T[]> supplier) {
        return Collector
            .of(
                ArrayList::new, // supplier,
                List::add, // accumulator,
                (left, right) -> {
                    left.addAll(right);
                    return left;
                }, // combiner,
                a -> a.toArray(supplier.get()) // finisher
            );
    }
