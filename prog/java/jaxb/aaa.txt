Q: dynamic tag names with jaxb
A: 
  Instantiate org.w3c.dom.Element or JAXBElement and assign to a property marked with @XmlAnyElement
  See https://dzone.com/articles/map-to-xml-dynamic-tag-names-with-jaxb
  You can even produce invalid XML using JAXBElement:

    public static void main(final String[] args) throws Exception {
        final JAXBContext jaxbContext = JAXBContext.newInstance(Object.class);
        final Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        final JAXBElement<String> elem =
            new JAXBElement<String>(new QName("el e>m"), String.class, "val");
        marshaller.marshal(elem, System.out);
    }

    <el e>m>val</el e>m>

  Unfortunately, Jackson does not support JAXBElement and treats it as a regular POJO.

  You can try to create custom MixIn and register it with ObjectMapper, but it's half-working
  https://automationrhapsody.com/unmarshalconvert-json-data-jaxbelement-object/

  Better use the annotations:

    // when deserialized from XML, this will hold one or more org.w3c.dom.Element
    // when serializing, we can put here one or more JAXBElement (easier to instantiate)
    // !!! you cannot deserialize JAXBElement without ObjectFactory,
    // because JAXBElement has no default constructor !!!
    // see https://timjansen.github.io/jarfiller/guide/jaxb/jaxbelement.xhtml
    @com.fasterxml.jackson.annotation.JsonIgnore
    @XmlAnyElement
    private List<Object> getCustom() {
      ...
    }

    // this is to deserialize unknown JSON fields; value can be a complex JSON object
    @com.fasterxml.jackson.annotation.JsonAnySetter
    public void jsonCustom(final String name, final Object value) {
      ...
    }
    // this is to serialize unknown JSON fields
    @XmlTransient
    @com.fasterxml.jackson.annotation.JsonAnyGetter
    public java.util.Map<String,Object> getJsonCustom() {
      ...
    }


To create a deep XML structure with dynamic tags:

    <xml>
        <lv1>
            <lv2>val1</lv2>
            <lv2>val2</lv2>
        </lv1>
    </xml>
    
    // https://stackoverflow.com/a/60184418/447503
    public class Recurs {
    
        private List<Object> custom;
    
        @XmlAnyElement
        public List<Object> getCustom() {
            if (custom == null) {
                custom = new ArrayList<>();
            }
            return custom;
        }
    
        public void setCustom(List<Object> custom) {
            this.custom = custom;
        }
    }
    
    
    @XmlRootElement
    @XmlSeeAlso({ Recurs.class }) // !!! This is important
    public class Xml {
        private List<Object> custom;
    
        @XmlAnyElement
        public List<Object> getCustom() {
            if (custom == null) {
                custom = new ArrayList<>();
    
                JAXBElement<String> lv2elem;
                Recurs recurs = new Recurs();
                for (int i = 1; i <= 2; i++) {
                    lv2elem = new JAXBElement<String>(new QName("lv2"), String.class, "val" + i);
                    recurs.getCustom().add(lv2elem);
                }
                JAXBElement lv1elem = new JAXBElement(new QName("lv1"), Recurs.class, recurs);
                custom.add(lv1elem);
            }
            return custom;
        }
    
    }



Q: assume xmlns/implicit xmlns/assume namespace
A:
  https://stackoverflow.com/questions/2991091/java-xsd-validation-of-xml-without-namespace
    final SAXSource source =
        new SAXSource(new NamespaceFilter(XMLReaderFactory.createXMLReader()), inputSrc);

    cfg = (ONIXMessage) unm.unmarshal(source);

    class NamespaceFilter extends XMLFilterImpl {

        NamespaceFilter(final XMLReader parent) {
            super(parent);
        }

        @Override
        public void startElement(
                final String uriArg,
                final String localName,
                final String qName,
                final Attributes atts) throws SAXException {
            final String uri = "".equals(uriArg) ? REQUIREDNAMESPACE : uriArg;
            super.startElement(uri, localName, qName, atts);

        }
    }


Q: generate java classes from xsd
A: xjc -no-header -encoding UTF-8 -p com.sn.efx.generated.onix3 -d generated ONIX_BookProduct_3.0_reference.xsd

Q: @XmlElement String prop;
A:
<tag>abc</tag> => "abc"
<tag>ab<some/>c</tag> => "c"
<tag>ab<!-- -->c</tag> => "abc"
<tag></tag> => ""
<tag/> => ""
<!-- --> => null


Q: @XmlElement Integer prop;
A: ditto, but whitespace removed



Q: save bean to xml
A: 
    JAXBContext.newInstance(beanclazz).createMarshaller().marshal(bean,System.out);

Q: schemagen generates multiple xsd files
A:
    schemagen generates one file per namespace plus one common file
    If no namespace used, schemagen will generate just one file

===========================================================================================

@WebServiceClient(name = "OrderServices", targetNamespace = "http://www.ibm.com/xmlns/prod/commerce/9/order", wsdlLocation = "file:/D:/okim-web/src/main/webapp/WEB-INF/wsdl/OrderServices.wsdl")
public class OrderServices
    extends Service
{

    private final static URL ORDERSERVICES_WSDL_LOCATION;

    static {
    	ORDERSERVICES_WSDL_LOCATION = OrderServices.class.getClassLoader().getResource("META-INF/wsdl/OrderServices.wsdl");
    }


???
okim-ws/src/main/resources/META-INF/wsdl/InventoryServices.wsdl
okim-war\src\main\webapp\WEB-INF\wsdl\InventoryServices.wsdl
???

	<wsdl:types>

		<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			targetNamespace="http://www.ibm.com/xmlns/prod/commerce/9/inventory">
			
			<xsd:include schemaLocation="../xsd/OAGIS/9.0/Overlays/IBM/Commerce/BODs/GetInventoryAvailability.xsd"/>
