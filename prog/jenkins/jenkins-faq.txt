Q: Jenkins prepends ${JAVA_HOME}/bin to PATH every time a script is run 
A: 
  Jenkins prepends PATH with the configured env vars with the names starting with "PATH+" before any step.
  The configured var PATH+JDK= exists because you have a JDK configured in Manage Jenkins -> Global Tool Configuration -> JDK

Q: I inject env var JAVA_HOME and it works until I use another inject env vars step
A: 
  Every time you use the  inject env vars Jenkins first resets the vars using the values from
  Manage Jenkins -> Global Tool Configuration -> JDK
  Manage Jenkins -> Configure System -> Global Properties

Q: Missing JDK dropdown in "job name" -> Configure
A: Manage Jenkins -> Global Tool Configuration -> JDK
  add more than one JDK

Q: Env inject - expand non-existing variables as empty strings
A:
    [v] Inject environment variables to the build process
    [v] Prepare an environment for the run
    Groovy Script
    return [NAME1 : "value1", NAME2 : "value2"]
    
    Example:
    return ["MAVEN_OPTS": getBinding().hasVariable("MAVEN_OPTS") ? MAVEN_OPTS : ""]
    
    https://stackoverflow.com/questions/58524750/append-possibly-non-existent-environment-variable-in-jenkins

Q: ???
A:
  Groovy script
    return [BUILD_REVISION: 
    
    [
    "I" : "refs/heads/master"
    ,"A" : "refs/heads/BR-LASTBUILD-I"
    ,"P" : "refs/heads/BR-LASTBUILD-A"
    ].get( EDFLUX_ENV )
    
    ]


Q: free space background monitor
A:
  exec 4>&1
  coproc TMPMON {
    set +x
    echo TMPMON started
    while read -r -t 1 x || [ $? = 142 ]; do
      df -m /tmp
    done
  } >&4
  eval "exec ${TMPMON[0]}<&-"

Q: job configurations location
A: $JENKINS_HOME/jobs/$JOB_NAME/config.xml

Q: build artifacts location
A: $JENKINS_HOME/jobs/$JOB_NAME/builds/$OLD_BUILD_NUMBER/archive/

Q: list installed plugins
A:
  http://<jenkins-url>/script
  
  Jenkins.instance.pluginManager.plugins.each{
    plugin -> 
      println ("${plugin.getDisplayName()} (${plugin.getShortName()}): ${plugin.getVersion()}")
  }


Q: Environment
A: Manage Jenkins -> Global Tool Configuration

Q: job config
A: $JENKINS_HOME/jobs/$jobname/

Q: .gitignore
A:
  builds/
  #modules/

Q: job-scope credentials
A: put jobs to folders (folders plugin)

Q: "Secret file" credentials
A: Credentials Plugin, Credentials Binding Plugin
  When plugins installed, go to job Configure and add a credentials parameter of type "Secret File".
  Name the variable "TESTCRED".

  Then check the checkbox: "Use secret text(s) or file(s)"
  This allows to convert a credential id to credential contents.
  In the "Secret file" binding Name the variable: TESTCRED_PATH
  and Parameter Expression: ${TESTCRED}
  Now the path to the secret file is available to the build steps


Q: Call another job with a certain secret file parameter
A: 
  In the caller job check "Use secret text(s) or file(s)"
  In the "Secret file" binding Name the variable: LOCAL_TESTCRED_PATH

  In the Trigger parameterized build on other projects in Parameters input the following:
    TESTCRED=test_cred_id
    TESTCRED_PATH=${LOCAL_TESTCRED_PATH}
  
  (you need both; the actual value used depends on plugins versions)

Q: 
  org.jenkinsci.plugins.credentialsbinding.impl.CredentialNotFoundException: ${TESTCRED}
  	at org.jenkinsci.plugins.credentialsbinding.MultiBinding.getCredentials(MultiBinding.java:131)
  	at org.jenkinsci.plugins.credentialsbinding.impl.FileBinding.bindSingle(FileBinding.java:53)
  	at org.jenkinsci.plugins.credentialsbinding.Binding.bind(Binding.java:133)
  	at org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper.setUp(SecretBuildWrapper.java:96)
  	at hudson.model.Build$BuildExecution.doRun(Build.java:156)
  	at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:534)
  	at hudson.model.Run.execute(Run.java:1728)
  	at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:43)
  	at hudson.model.ResourceController.execute(ResourceController.java:98)
  	at hudson.model.Executor.run(Executor.java:404)
  Finished: FAILURE

A:
  credential plugins too old and the credentials parameter passed from parent job does not refer an existing credential id
  Newer credential binding plugin ignores the credential id value if the outcome variable is also passed from the parent job


Q: list plugins
A: 
  http://<jenkins-url>/script
  
  Jenkins.instance.pluginManager.plugins.each{
    plugin -> 
      println ("${plugin.getDisplayName()} (${plugin.getShortName()}): ${plugin.getVersion()}")
  }
