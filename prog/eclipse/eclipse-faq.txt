Q: ???
A:
lifecycle-mapping-metadata.xml


Q: Hot swap + Lombok + ECJ + Ant
A:
  Since the release of Java 8 the Eclipse compiler creates byte code that cannot be
  hot swapped into a loaded class compiled with JDK. The workaround is to initially
  build the project using Eclipse Compiler for Java (ECJ) aka JDT Compiler.
  Our Ant scripts already have a property for that and it can be enabled on the
  command line: -Djavac.compiler=org.eclipse.jdt.core.JDTCompilerAdapter  
  The problem with ECJ is it cannot load Annotation Processors as easily as javac
  does and since we added Lombok the ECJ compilation fails with inability to load the
  Lombok annotations or worse, Lombok annotations being ignored causing unexpected
  sanity errors.
  
  The solution is to run Ant build in a Separate JRE and load the Lombok libraries in
  accordance to the guide.
  
      Download lombok.jar v1.18.24 or higher: (there's a known problem with v1.18.18
      bundled with Eclipse and there's another problem with lombok-1.18.4.jar we ship
      ourselves: Ant terminates instantly)
          https://projectlombok.org/download
      Download ecj-4.19.jar - the nearest to eclipse-jee-2021-03-R-win32-x86_64 and
      still runnable in JRE8
          https://archive.eclipse.org/eclipse/downloads/
      Add the argument on the tab "Main": 
         -Djavac.compiler=org.eclipse.jdt.core.JDTCompilerAdapter
      Add an external Jar on the tab "Classpath": ecj-4.19.jar
      On the tab "JRE"
          Switch to "Separate JRE" and choose the previously installed OpenJDK 8
          In "VM arguments" add:
            -Xbootclasspath/a:C:\Path\To\lombok.jar
            -javaagent:C:\Path\To\lombok.jar
      Deploy the app, attach the remote debugger and try to edit method bodies: the
      changes should be applied without problems

Q: download latest ECJ
A: https://archive.eclipse.org/eclipse/downloads/

Q: External tool builder not run automatically on source file save
A: On "Targets" tab select a target for auto builds

Q: .class files visible in "Open Resource"
A: Open the "Navigator" view, navigate to the project output folder, open folder properties and set the "Derived" checkbox

Q: JDK internal class not visible in "Open Type"
A: Window > Preferences > Java > Appearance > Type Filters

Q: console buffer size
A: workspace\.metadata\.plugins\org.eclipse.core.runtime\.settings\org.eclipse.debug.ui.prefs
  Console.highWaterMark=8008029
  Console.lowWaterMark=8000029

Q: good decompiler
A: Enhanced Class Decompiler
  https://marketplace.eclipse.org/content/enhanced-class-decompiler#comment-6327

Q: slow step over java
A:
  https://bugs.eclipse.org/bugs/show_bug.cgi?id=530440
  uncheck "show method result"

Q: decompiler of choice
A: enhanced class decompiler

Q: run on server maven war overlay resources missing
A: open pom.xml, remove overlay dependecy, save, add overlay dependency, save

Q: maven generated resources
A:
  Window/Preferences/Maven/Discovery/Open Catalog
    - apt connector
    - buildhelper connector
  
  Window/Preferences/Maven/Annotation Processing
    Automatically
  
  Artifacts containing annotation processors must be installed to local repo.
  Make sure these artifact maven projects are not opened in Eclipse, or the generated .factorypath will lack some M2_REPO/**/*.jar

Q: Unsupported location: SOURCE_PATH
A: 
  Both javac and Eclipse don't support SOURCE_PATH, but javac throws FileNotFoundException and Eclipse throws IllegalArgumentException, which is often not caught by processors

Q: source not found
A: 
  - If you want to add sources from another project libraries (native eclipse java project) then make sure that project exports all its dependencies 
  - Add seemingly unrelated projects to source path
  - Try "Remote Java Applicatopn". It's more capable than local
  - Decompile and try to compile the class in question. Add missing dependencies to project classpath

Q: The superclass "javax.servlet.http.HttpServlet" was not found on the Java Build Path	index.jsp	/myweb/src/main/webapp	line 1	JSP Problem
A: 
    Maven

    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>3.1.0</version>
        <scope>provided</scope>
    </dependency>


Q: error(s)_during_the_evaluation for watch expression
A: possibly incomplete classpath. Put a conditional breakpoint and see the error

Q: There's no attempt to evaluate a watch expression: blank value column and no error message 
A:

Q: "Source not found" during debug despite source found during development 
A: 

Q: Alter $PATH at .launch
A: ${system_property:path.separator}${env_var:PATH}


Q: access restriction in rt.jar
A:
    Go to the Build Path settings in the project properties.
    Remove the JRE System Library
    Add it back; Select "Add Library" and select the JRE System Library. The default worked for me.
********************************************************************************
Q: Attribute 'attrname' is not allowed to appear in element 'elem', XML Catalog
A: 
  1) Eclipse is right, fix your XML
  2) download the xsd, add missing attr into it, go to preferences, XML Catalog, 
     add your modified xsd to it
     key type: Schema location
     key     : the original xsd url (if xsi:schemaLocation="a b", use "b" or try both)
********************************************************************************
Q: m2eclipse plugin gives NPEs when importing projects
A: don't use m2eclipse, use mvn eclipse:eclipse
********************************************************************************
Q: organize imports, do not expand asterisks
A:
    Choose 'Window -> Preferences...' menu.
    Choose 'Java -> Code Style -> Organize Imports' in the left pane.
    Set the 'Number of static imports needed for .*' to '1' in the right pane.
    Click 'OK' button.
********************************************************************************
Q: strip javadocs from .java files
A:
select projects
Search->File
Containing text:
((?<!\\)"([^"]|(?<=\\)")*")|(/\*\*(?s:(?!\*/).)*\*/)
Regular expression: checked
File name patterns: *.java
Scope: Selected resources
Replace...
\1
********************************************************************************
