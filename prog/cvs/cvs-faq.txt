Q: interpret log/rlog
A:
  To have only last log message, use -rbranch_name or -rHEAD
  
  Files not existing in HEAD have the "Attic" prefix:
    /path/to/cvsroot/MODULENAME/Attic/deletedfile,v
  
  If a file was deleted in selected branch, last log entry contains: state: dead


Q: anonymous
A: try user: anoncvs

Q: proxy
A:
  cvs -d anoncvs@cvs.netbeans.org:/cvs c
  will use ~/.ssh/config

Q: local repo
A:

rm -rf cvs_repository empty_dir work_dir

mkdir cvs_repository
export CVSROOT=:local:`pwd`/cvs_repository
cvs init

mkdir empty_dir
cd empty_dir
cvs import -mroot myprojects vtag rtag
cd ..

mkdir work_dir
cd work_dir
cvs co myprojects
cd myprojects

touch a b c
cvs add a b c ; echo $?

cvs commit -mabc


date >d
date >a
rm b

cvs add d; echo $?
cvs rm b; echo $?

cvs commit -macd



Q: cvs commit modified/added/removed
A: 

rsync --dry-run -av --omit-dir-times --delete --checksum --include="*.so" --exclude=CVS/ --cvs-exclude ../../gitcvs/RAP/ ./ | less
>~/rsync.log 2>~/rsync.err rsync -av --omit-dir-times --delete --checksum --include="*.so" --exclude=CVS/ --cvs-exclude ../../gitcvs/RAP/ ./


rsync --dry-run -av --omit-dir-times --delete --checksum --include="*.so" --cvs-exclude ../../gitcvs/RAP/ ./ | less

<~/rsync.log sed -e '/sending incremental file list/,/^$/!d' -e '/\(sending incremental file list\|^$\|[/]CVS[/]\|[/]$\)/d' | less
<~/rsync.log sed -e '/sending incremental file list/,/^$/!d' -e '/\(sending incremental file list\|^$\|[/]CVS[/]\|[/]$\)/d' -e 's/^deleting //;t;d' | xargs cvs rm

<~/rsync.log sed -e '/sending incremental file list/,/^$/!d' -e '/\(sending incremental file list\|^$\|cannot delete non-empty directory\|[/]CVS[/]\|[/]$\)/d' -e '/^deleting /d' | less


sending incremental file list
deleting dbinstall/migration/CVS/Root
...
deleting variations/ch/.profile.rap.stag.sample
deleting variations/ch/.profile.rap.prod.sample
.settings/
.settings/language.settings.xml
.settings/org.eclipse.cdt.core.prefs
.settings/org.eclipse.cdt.ui.prefs
...
variations/ch/rapstart

sent 3,569,354 bytes  received 29,482 bytes  1,439,534.40 bytes/sec
total size is 16,998,145  speedup is 4.72


********************************************************************************
Q:  create new module remotely
A:
    Usually modules are defined in CVSROOT/modules, check it out, edit it and check it back in:
        cvs co CVSROOT
        vi CVSROOT/modules
        cvs commit
    
    However real CVS modules are basically a kind of “virtual collection” which for example allows a module named “TEST”
    to refer to multiple directories to be checked out.
    Developers who don't know about modules often refer to "modules" in terms of directories. Then they would simply
    fork all the code and commit it to a new directory called NEWMODULE. So the code is simply checked in to a directory
    and not using CVS modules functionality:
        export CVSROOT=:pserver...
        cvs import -I ! -m "My initial project message" NEWMODULE mycompany start


    default file version is 1.1.1.1
    >> This is correct behavior.  The confusion stems from thinking that the
    >> Vendor branch is distinct from CVS Main branch.  It isn't.  For those
    >> files that have not been modified since being imported, the Vendor
    >> branch _is_ the Main branch.  Is it not the current revision of the
    >> file in the main stream of development?  Once a file has been modified,
    >> the Main branch diverges from the Vendor branch.  It is an
    >> implementation detail that this divergence involves switching the RCS
    >> default branch from 1.1.1 to 1.1 and checking in starting with revision
    >> 1.2.  However, if you ask CVS for a tag or date from before the
    >> modification of the file, but after it was imported, then you'll get
    >> back a version off of the Vendor branch, that being the revision
    >> current with the file was tagged or when that date passed.
    >> 
    >> Personally, I think things are easier to think about if, rather than
    >> looking at revision number, you tag just about *everything* and then
    >> never use revision numbers, only tags.  Then, keep on your whiteboard,
    >> or whereever, a branching tree showing how the tags are related.

********************************************************************************
Q: list all modules
A:
after having logged in
cvs ls

should work just fine.
If your version of CVS/CVSNT does not support the ls command then you can try
cvs checkout -c

********************************************************************************
Q: cvs status: warning: directory CVS specified in argument
A:
rm -rf CVS/CVS
vim CVS/Entries
remove line:
D/CVS////
********************************************************************************
Q: cvs status
A:
cvs -Q status | awk '
/^\? / { print; }
/Status: Up-to-date/ { getline; }
/Status: / {
  for (i = 10; i > 0; i--) {
    print;
    if (substr($0,1,3)=="===") break;
    getline;
  }
}'
********************************************************************************
Q: cvs commit: sticky tag `thetag' for file `thefile' is not a branch
A: We are trying to commit changes to a file that had already been changed and 
   for which we had already added those changes to the repository. You can bring
   all files up to date with cvs update -A, but make sure you save the changes
   to your working file first!
********************************************************************************
Q: cvs update: create missing directories
A: cvs up -d
********************************************************************************
Q: get latest cvs commit
A: 
cvs -d"$_cvsroot" rlog -N -d "" "$_cvsmod"
Explanation:
-N      Do not print the list of tags for this file. This reduces output
-d ""   Select the single, latest revision dated d or earlier. Note that it still
        prints the list of unsorted dates, that has to be filtered, parsed, and sorted

parse 'cvs rlog' . Note that date formats may vary, but GNU date can parse them
easilly. Example:

# GNU date
GDATE=date
# read human readable dates from stdin and print yyyyMMdd
if [ "$GDATE" ]; then
  PARSECVSDATE="$GDATE -f - +%Y%m%d"
else
  fn_parsecvsdate() {
    sed -e 's/.*\(^\|[^0-9]\)\([0-9][0-9][0-9][0-9]\)[^0-9]\([0-9][0-9]\)[^0-9]\([0-9][0-9]\)\([^0-9]\|$\).*/\2\3\4/;t;D'
  }
  PARSECVSDATE=fn_parsecvsdate
fi
  
  (
cat <<'EOF'
garbage
date: 2001/08/13 22:54:14;  author: eckzor;  state: Exp;
garbage
date: 2002-10-02 19:17:35 +0400;
garbage
EOF
  ) | sed -e 's/^date:\([^;]*\);.*/\1/;t;D' | $PARSECVSDATE | sort -r | head -1
********************************************************************************
Q: create a branch
A:
cvs tag branchname_0
cvs tag -r branchname_0 -b branchname
cvs update -r branchname

********************************************************************************
Q: strip $Log$ macro
A:

find . ! -path "*/.git/*" -type f | xargs grep -Il '\$Log\$' | xargs sed -i -b -e 's,.*\\endverbatim,aaaeeeaaa&,'

fn_s2re() {
    case "$1" in
        " *") a='^ \*'; ;;
        "#") a='^\#'; ;;
        "# History:") a='^\# History:'; ;;
        "#") a='^\#'; ;;
        "*") a='^\*'; ;;
        "**") a='^\*\*'; ;;
        "***") a='^\*\*\*'; ;;
        *)
            echo unknown string "$1" >&2
            return 1
            ;;
    esac
}

find . ! -path "*/.git/*" -type f | xargs grep -Il '\$Log\$' | while read f; do
    echo "$f"
    b=`sed -n -e 's|[ 	]*\$Log\$.*||' -e T -e "p;q" "$f"`
    fn_s2re "$b" || {
        break
    }
    echo "x${a}x"
    sed -i -b -n -e "/$a"'[\r 	]*\$Log\$/!{p;b}' -e :l -e "/$a"'\([\r 	]*$\|[\r 	]\)/!{p;b}' -e "n;b l" "$f"
done

find . ! -path "*/.git/*" -type f | xargs grep -Il 'aaaeeeaaa' | xargs sed -i -b -e 's,aaaeeeaaa,,'

********************************************************************************
?????
cvsps --norc -q --cvs-direct -u -A --root :pserver:reevzh1@blackbird:10010/data/cvs/ppb RAP
