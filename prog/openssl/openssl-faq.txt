# create a self-signed certificate
openssl req -newkey rsa:2048 -nodes -keyout cert.key.pem -x509 -days 365 -out cert.pem

# Export cert only to p12
openssl pkcs12 -in cert.pem -export -nokeys -out cert.pem.p12


# convert from openssh public key format to BEGIN RSA PUBLIC KEY
ssh-keygen -e -m PEM -f ~/.ssh/id_rsa.pub >~/.ssh/id_rsa.pub.pem

# convert from BEGIN RSA PUBLIC KEY to ssl BEGIN PUBLIC KEY
openssl rsa -in ~/.ssh/id_rsa.pub.pem -RSAPublicKey_in -pubout > ~/.ssh/ssl.pub.pem


Q: Certificate, Version=3
A: -inform DER

Q: Dump a certificate
A: 
  openssl x509 -in certificate.crt -text -noout
  openssl rsa -in postgresqlshb3fmrh.key -text -noout
  openssl pkcs8 -in postgresqlshb3fmrh.pk8 -inform DER -nocrypt | openssl rsa -text -noout

Q: Dump a certificate from a server
A:
  s_client -showcerts -verify 5 -connect host:443 < /dev/null
 
Q:
A:

  mkdir /tmp/fakesite
  cd /tmp/fakesite

  # index.txt must pre-exist
  touch index.txt
  
  # create minimal config
cat <<'EOFCONF' >tmp.cnf
[ ca ]
default_ca      = CA_default            # The default ca section
[ CA_default ]
dir             = .           # Where everything is kept
database        = $dir/index.txt        # database index file.
serial          = $dir/serial           # The current serial number
[ policy_any ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional
EOFCONF
  
  # create self-signed certificate  
  openssl req -newkey rsa:3072 -sha256 -days 3651 -nodes -x509 -subj "/C=US/O=AAATrusted, Inc/CN=AAATrusted CA" -keyout root.key -out root.crt
  # dump as text
  openssl x509 -in root.crt -text -noout -text >root.crt.txt
  # export as p12 (with empty password)
  openssl pkcs12 -in root.crt -export -nokeys -passout "pass:" -out root.p12

  ########################33
  
  # 
  FILENM="acme.com"
  # wildcard CN
  NAME="*.$FILENM"

  # create certificate request  
  openssl req -newkey rsa:3072 -sha256 -nodes -subj "/C=US/O=AAATrusted, Inc/CN=$NAME" -keyout "$FILENM.key" -out "$FILENM.csr"

# Create a config file for the extensions (Chrome 58+)
>extensions.ext cat <<-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = $NAME # Be sure to include the domain name here because Common Name is not so commonly honoured by itself
EOF

  # sign  
  yes | openssl ca -days 3650 -cert root.crt -keyfile root.key -in "$FILENM.csr" -out "$FILENM.crt" -outdir . -config ./tmp.cnf -md sha256 -policy policy_any -create_serial -extfile extensions.ext -notext
  # dump as text
  openssl x509 -in "$FILENM.crt" -text -noout -text >"$FILENM.crt.txt"

  # create a bundle for STunnel
  cat "$FILENM.crt" "$FILENM.key" root.crt >"$FILENM-bundle.pem"
