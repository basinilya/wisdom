Q:  get sysobject attribute after calling destroy()
A:
  destroy() removes itself from the cache and it marks the data as stale so if you still have a reference
  to the object with isDeleted() == true, trying to get an attribute will fail because of the refresh attempt.  
  The only way is to read the data with reflect:
  
        IPersistentObject saveObj = (IPersistentObject) obj;
        if (saveObj instanceof IProxyHandler) {
            saveObj = (IPersistentObject) ((IProxyHandler) saveObj).____getImp____();
        }
        final Class<?> clazz1 = DfTypedObject.class;
        final Field field = clazz1.getDeclaredField("m_data");
        field.setAccessible(true);
        final ITypedData data = (ITypedData) field.get(saveObj);
        final String objectName = data.getString("object_name");
        System.out.println(objectName);

Q: Runnable that throws DfException
A: IDfRegistryPlayback

Q: large content
A: 
  - !!! IDfSysObject#getCollectionForContent / IDfContentCollection#seek 
  - IDfSysObject#getFile
  - !!! do not use IDfSysObject#getContent for large content
  - ISysObjectInternal#getStream - if no need to seek
  https://web.archive.org/web/20180608194643/https://blog.documentum.pro/2014/08/12/dealing-with-large-content/

Q: Add C:\Documentum\config to run classpath in IDE for a Maven project
A: 
  <properties>
    <dfc.config.path>C:\Documentum\config</dfc.config.path>
    <dfc.config.bridge>${dfc.config.path}/../documentum-config-bridge.jar</dfc.config.bridge>
  </properties>

  <profiles>
    <profile>
      <!-- adds dfc.properties to classpath when you run it from IDE -->
      <!-- copy lib/documentum-config-bridge.jar to: ${dfc.config.path} -->
      <id>dfc-config</id>
      <activation>
        <file>
          <exists>${dfc.config.bridge}</exists>
        </file>
      </activation>
      <dependencies>
        <dependency>
          <groupId>config-bridge</groupId>
          <artifactId>config-bridge</artifactId>
          <version>1.0</version>
          <scope>system</scope>
          <systemPath>${dfc.config.bridge}</systemPath>
        </dependency>
      </dependencies>
    </profile>
  </profiles>


Q: get client id from dfc.keystore
A: 
        final IPublicIdentity identity = new PublicIdentity();
        // dfc_4bkPbZ5cZbbtup8HyR7oh8tnnjUa
        System.out.println(identity.getIdentity());

Q: newSession()/getSession() fails with DM_GROUP_E_PROTECTED_ROLE_PRIV
A: the desired dynamic groups are stored in SM, not in the session handle:
    package com.documentum.fc.client.impl.session;    
    class Session {
      ...
      public void addDynamicGroup(String groupName) throws DfException {
        getSessionManager().getConfig().addDynamicGroup(groupName);
        setClientInfo(m_sessionManager.getClientInfo(), true);
      }
      public void removeDynamicGroup(String groupName) throws DfException {
        getSessionManager().getConfig().removeDynamicGroup(groupName);
        setClientInfo(m_sessionManager.getClientInfo(), true);
      }
  Always clean the invalid dynamic groups before trying to obtain a new session.
  https://blog.documentum.pro/2014/09/03/dynamic-groups-advances-part-i/

Q:
    Exception in thread "main" java.lang.ExceptionInInitializerError
            ...
            at com.sn.efx.test.AaaTestFetchBad.main(AaaTestFetchBad.java:19)
    Caused by: com.rsa.crypto.CryptoException: java.lang.SecurityException: java.lang.SecurityException: The FIPS140 self-integrity check failed.
            at com.rsa.crypto.jcm.ModuleLoader.<clinit>(Unknown Source)
            ... 19 more
    Caused by: java.lang.SecurityException: java.lang.SecurityException: The FIPS140 self-integrity check failed.
            at com.rsa.jcm.f.hx.a(Unknown Source)
            at com.rsa.jcm.f.jq.c(Unknown Source)
            at com.rsa.crypto.jcm.ModuleLoader.b(Unknown Source)
            ... 20 more
    Caused by: java.lang.SecurityException: The FIPS140 self-integrity check failed.
            at com.rsa.jcm.f.f.a(Unknown Source)
            at com.rsa.jcm.f.hx.f(Unknown Source)
            ... 23 more

A: It's trying to create the missing dfc.keystore, but the crypto libraries don't work, because they were repacked
  Don't repack the libraries

Q: IDfSession.getLoginTicketEx() timeout unit
A: minutes

Q: connect to specific node in a cluster
A: final IDfSession otherSession = sm.getSession(docbase + "." + otherServer);
  where otherServer is dm_server_config.object_name

Q: dfc quick start
A: 
        // or launch with -Ddfc.properties.file= or have dfc.properties in classpath
        System.setProperty("dfc.properties.file", "C:\\Documentum\\config\\dfc.properties");
        
        final IDfClient cl = DfClient.getLocalClient();
        final String docbase = "mydocbase";
        final IDfSessionManager sm = cl.newSessionManager();
        
        final IDfLoginInfo info = new DfLoginInfo();
        info.setUser("joe");
        info.setPassword("xxx");
        info.setSecurityMode(IDfLoginInfo.SECURITY_MODE_TRY_NATIVE_FIRST);
        sm.setIdentity(docbase, info);
        final IDfSession session = sm.getSession(docbase);

Q: multiple certificate records in global registry or docbase
A: quick workaround: delete dfc.keystore on client

Q: session leaks
A:
   
    log4j.properties:
      log4j.logger.com.documentum.fc.client.impl.session.StrongSessionHandle$DisposableData=ERROR,SESS_LEAK_DETECT
      log4j.logger.com.documentum.fc.client.impl.collection.CollectionHandle$DisposableData=ERROR,SESS_LEAK_DETECT
      # this one is outdated:
      #log4j.logger.com.documentum.fc.client.DfSessionLeakChecker=ERROR,SESS_LEAK_DETECT
    
    dfc.properties:
      dfc.diagnostics.resources.enable = true

Q: SQL for session.getObject() with repeating attr
A: 
  SELECT  *
  FROM mytype_rv SQ_ , mytype_sv RQ_
  WHERE (RQ_.r_object_id=$1
  AND RQ_.r_object_id=SQ_.r_object_id)
  ORDER BY SQ_.r_object_id,SQ_.i_position


Q: IDfQuery.DF_CACHE_QUERY expiry
A: 
IDfQuery.setCurrencyCheckValue(). Default: IDfPersistentObject.CURRENCY_CHECK_NEVER = "check_never"

Q: trace DQL to common log
A:
log4j.properties:

  log4j.logger.com.documentum.fc.tracing.DFCTrace=DEBUG

dfc.properties

  dfc.tracing.enable=true
  dfc.tracing.verbose=true
  dfc.tracing.max_stack_depth=0
  dfc.tracing.mode=compact
  #dfc.tracing.dir=/tmp/dfc_tracing
  dfc.tracing.include_rpcs=true
  dfc.tracing.include_session_id=false
  # !!! dfc.tracing.user_name_filter is buggy, do not use
  #dfc.tracing.user_name_filter[0]=efxim
  dfc.tracing.method_name_filter[0]=com.documentum.fc.client.impl.connection.docbase.netwise.NetwiseDocbaseRpcClient.applyForCollection()


Q: escape string
A:
        System.err.println("toQuotedString " + DfUtil.toQuotedString("abc'def"));
        toQuotedString 'abc''def'

Q: catch DM_FOLDER_E_PATH_EXISTS
A: 
  Mind the DM_FOLDER_E_UNIQUENESS_CHECK_FAILED
    private static final boolean isPathExists(final DfException e) {
        return "DM_FOLDER_E_PATH_EXISTS".equals(e.getMessageId());
    }
  Note that active transaction becomes invalid after this:
    DfException:: THREAD: main; MSG: [DM_SESSION_E_TRANSACTION_ERROR]error:  "Transaction invalid due to errors, please abort transaction."; ERRORCODE: 100; NEXT: null

Q: nulldate:
A:
  null
  new DfTime((Date)null))
  new DfTime("nulldate")

  if iDfTime.toString() returns "nulldate", then getDate() returns null

Q: nullstring
A: 
  Recently added string attributes contain NULL values in db.
  With DQL UPDATE you can store any db value except NULL or empty string.
  Trailing spaces are not trimmed while updating.
  On the other hand, getString() applies rtrim operation to the db value and it
  returns empty string for any db value consisting of spaces.
  Also, getString() returns empty string for db value NULL (except when it's a repeating attribute having zero values, then it returns null).


Q: DF_READ_QUERY vs DF_EXEC_QUERY
A:
    TL-DR: Do not READ_QUERY if you perform other DFC calls in between

    DF_READ_QUERY
    Use this query type for queries containing SELECT statements that will not make changes to the repository. You can execute non-SELECT statements with a DF_READ_QUERY query, but there are no performance benefits in doing so. Note that if a DF_READ_QUERY query makes changes to the repository during processing, the collection returned by the query closes automatically. When the collection is closed, up to batch_hint_size objects will be modified but no error or exception will be raised. Consequently, if you want a query to make changes to a repository during processing, use a DF_QUERY query
    
    DF_QUERY
    This is a general-purpose query type and the one most commonly used, notice that it corresponds to the ‘1’ mentioned in the text above.  Use this query type for any DQL statement. However, you must use this query type for queries that make changes to the repository.
    
    DF_CACHE_QUERY
    This query type indicates that a query executes as read-only and stores the results in a query cache file. Cached queries can improve performance for queries whose results are generally static. For example, you might use a DF_CACHE_QUERY query to return the names of users in the repository. To implement cached queries, you need to configure the DFC to store the query results in the client query cache. See the EMC Documentum Content Server Fundamentals guide.
    
    DF_EXEC_QUERY
    This query type is the same as the DF_QUERY query type but should be used when the query string is longer than 255 characters. At least that’s what the documentation says. EDN users report that query strings longer than 255 characters run fine with DF_QUERY and that this limitation may have only existed in “old” versions of Documentum.
    
    DF_EXECREAD_QUERY
    This query type is the same as the DF_READ_QUERY query type but should be used when the query string is longer than 255 characters. At least that’s what the documentation says. EDN users report that query strings longer than 255 characters run fine with DF_READ_QUERY and that this limitation may have only existed in “old” versions of Documentum.
    
    DF_APPLY
    Use this query type for queries that invoke procedures that perform system administration functions or run external procedures. For example, GET_PATH or GET_INBOX.
    
    https://msroth.wordpress.com/2010/07/18/dfquery-constants/

    The explanation of the 255 chars limit:
    
    The query must be less than or equal to 255 characters in length if one is using Dynamic Data
    Exchange (DDE) as the communications protocol between the external application and Content
    Server.
    
    If one wants to send a query that is greater than 255 characters and you are using DDE, use
    the exec query method instead of read query.
    
    https://education.emc.com/content/dam/dell-emc/documents/en-us/KS2009_Harper-Custom_Documentum_Application_Code_Review.pdf
