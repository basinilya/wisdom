Important: in Orange Pi Lite the Wi-Fi antenna cable spans over the board when marketed.
It can be carefully unplugged and re-plugged so the antenna can be placed outside of the board.

Important: in Orange Pi Lite the CPU could use a better cooling. Install a 14x14x10 mm passive heat sink.
To do that stick small pieces of electrical tape around the chip to protect the board from the glue.
Cover the board with a PE foil with a hole a little bigger than the chip and stick a few more pieces of electrical tape to fixate the foil.
Prepare a 1 Kg weight to make the glue dry well. Make sure it's stable and it doesn't touch the surrounding components.
Prepare a room where it can dry safely.
Cut a cotton swab in half to get plastic stick for measuring the glue. 
Clean the surfaces of the heat sink and the chip using a cotton swab with ethanol.
Do not withdraw the glue directly on the surface.
Withdraw a small amount to something that can serve as a paint tray and use the plastic stick to apply the needed dose to one of the surfaces (usually 0.05 ml, see the glue manual).
Stick the heat sink, press and adjust until the glue is seen on all four sides.
Place the weight and let it dry. 


At time Orange Pi Lite wi-fi only works in Armbian. The debian image does not detect the device
journalctl for NetworkManager shows the wlan model: rtl871x

# Download
https://www.armbian.com/orange-pi-lite/
Scroll to the bottom, choose the stable image. Buster Desktop is the biggest.

https://armbian.hosthatch.com/dl/orangepilite/archive/Armbian_21.02.1_Orangepilite_buster_current_5.10.12_desktop.img.xz

! important, check in Disk Management !
sdcard=/dev/sdc

dd if=/dev/zero count=1 of="${sdcard:?}"

sync

# reload without replug
diskaprt blah blah

# Write to sd-card
<Armbian_21.02.1_Orangepilite_buster_current_5.10.12_desktop.img.xz pv -B1m | xz -dc | dd bs=1M of="${sdcard:?}"

# reload without replug
diskaprt blah blah

sync

==== BEGIN: Optional: Connect wi-fi before 1st boot ======

==== Armbian way

Mount (armbian does not have separate /boot partition)
edit boot/armbian_first_run.txt
( boot/armbian_first_run.txt.template )

FR_net_wifi_enabled=1
FR_net_wifi_ssid='MySSID'
FR_net_wifi_key='MyWiFiKEY'

====



Mount,

/etc/rc.local :
sleep 10 # just in case since this is a dirty workaround
nmcli dev wifi connect "mySSID" password "mypwd" 
#nmcli device wifi connect UUID
#echo "password"| nmcli --ask c up UUID

==== END: Optional: Connect wi-fi before 1st boot ======

Unplug

First boot

- Auto expands the partition to the entire sd-card
- Prompts to create the new root password
- Prompts to enable desktop
- Prompts to create the new regular user name
- Prompts to create the new regular user password


Login to xfce as regular user

Settings Manager/Accessibility/Mouse/Enable emulation

Set timezone

    timedatectl set-timezone Europe/Moscow


Setup Wi-Fi

Connect with SSH. Host name: orangepilite

# in case you have more than MaxAuthTries=6 keys in your agent
SSH_AUTH_SOCK= ssh -i /dev/null root@orangepilite

- install ssh key
fn_commands() {
cat <<'EOFCONF'
    key='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC3rIgFDr6UGsBvXDPj+c2fxnORCdW4tYzGbrvonoxDXADGo4MJMulfKsVyI3HJZ4vO6asx4q8X13NAWXL/KXc6hnd/5qA4lmamY/X0niY1jkfApmrkhFohiDtly23onT6LetK8/kAsfG7ltTghkZkYSk7MxYMqv8j9XR8MqftjhwyiIWV7K0bf4XF8aJRN8T2f69se9pVpqxNUCVi2slRUXK8qtcxLWPdVK6o0lxGqru7cIkBRHtmA/DKdrOnCoT2SUE9OgmKJuKXMr1p640IDqWbXy0lDHaVPrgSZ9ykHZFaqlamMtuCiPcLxccVfOKIW3iC7wbp/SNQaRe4u0d//oBksxCk2DK5P/AqfHAiG/KJTMPdd0VS17JteVIt1dgCTrDQXX4Ss19RvcmXbpOL5ZALdh9f3mGP9qSS/aMFoDKSvquqk066QW/VK4iXM0CW8443yEoxNGvSJN7VkzPZLsxxCstLA9vfD3m2YJdYMv+zM3S91OKPoCXSht1L//wpnHEOXcAHC7wDogJW6SyBdKLWV3HXZ6luZD1BjoRdcdnvt97dRGu8kg1L2xFkodAWC7JQ1VxfVyCz9eFIEA+xG8EG5IQAIiFEdeE6DVBBiH6ROebRe+mEcg/uChouv3/RVK+cAN/ycBFLaKikAAFPaeVx1TDP96Kyh+cJXcXVAOQ== user'
    sh -c 'mkdir -p $HOME/.ssh/; chmod 700 $HOME/.ssh; /sbin/restorecon -R -v $HOME/.ssh; echo "'"$key"'" >> ~/.ssh/authorized_keys; chmod 600 ~/.ssh/authorized_keys'
EOFCONF
}

fn_commands | sh
fn_commands | su - il

==== BTRFS ========

Some articles say that u-boot supports btrfs. It doesn't. You need a separate ext4 or fat boot partition.
Armbian initramfs (at least, 21.02.1) *does* support btrfs. No need to call mkinitramfs/mkimage

Plug the sd-card into a Linux PC. /dev/mmc* devices should appear.

We need to save the filesystem UUID. Run the following:

    blkid -o export /dev/mmcblk0p1

Save the printed UUID= in a safe place or run as:

    eval `blkid -o export /dev/mmcblk0p1`


Now convert the filesystem. Run the following:

    btrfs-convert --copy-label /dev/mmcblk0p1

Older versions of btrfs-convert don't keep the filesystem UUID. To check, run the following:

    btrfs filesystem show

If it's changed, we need to restore it:

    btrfstune -U "$UUID"

where $UUID is the previously saved UUID of the ext4 root partition.

Alternatively, we will need to update the UUID in /boot/armbianEnv.txt and /etc/fstab. See below.




Now we need to *move* the root partition 512Mb forward to free-up space for the boot partition.

As Armbian automatically expanded the root partition during the first boot it's inconvenient to use dd for backup.
partclone.btrfs (from partclone) is a good tool for the task because it does not copy the unoccupied blocks.

I haven't tried restoring a partclone backup to a smaller partition. As a precaution we can shrink it:

    btrfs filesystem resize -600M /dev/mmcblk0p1

To actually move the partition we create the image file:

    cd /path/to/backups
    partclone.btrfs --clone --source /dev/mmcblk0p1 | gzip -c >armbian_root.partclone.gz

Next, repartition the sd-card. Make sure the sd-card is not mounted. It's important for the boot partition to start at the same offset as the former root partition.
With the cfdisk tool it's solved like this:

    cfdisk /dev/mmcblk0

This will open a pseudo-graphic interface listing the only partition on the sd-card.
Select the partition and choose "Resize" and enter the new size: 512M

Now select the free space below and choose "New" to create the new root partition. Enter the dos partition type: primary, type: 83 (Linux) and keep the default size.

Choose "Write" to write the changes and type "yes" on your keyboard to confirm the changes. The new device nodes mmcblk0p2 and mmcblk0p1 were created.

Create the /boot filesystem. As a precaution we choose a bigger block size:

    mkfs.ext4 -b 4096 /dev/mmcblk0p1

Confirm to overwrite the existing btrfs signature.

Restore the root partition:

    cd /path/to/backups
    gzip -dc armbian_root.partclone.gz | partclone.btrfs --restore --output /dev/mmcblk0p2

Mount the new root:

    mount /dev/mmcblk0p2 /mnt

If the command above fails with "mount(2) system call failed: File exists." it means that the kernel "thinks" there's another device with the same btrfs uuid.
Make sure no visible block devices contain other copies of the root filesystem. However, this error may also be caused by the certain bug in older kernels.
`btrfs device ... --forget`  will not help. You have to reboot.

After successfully mounting the new root we need to populate the /boot partition.

    cd /mnt
    mv --no-target-directory ./boot ./boot.old
    mkdir ./boot
    mount /dev/mmcblk0p1 ./boot
    cp -a --no-target-directory ./boot.old ./boot

Instruct u-boot to load Linux with the new root. Edit /mnt/boot/armbianEnv.txt and change `rootfstype=ext4` to `rootfstype=btrfs`.
If the UUID of the root partition changed (see above) then we also need to update the line `rootdev=UUID=...`.

Edit the root FS entry in /mnt/etc/fstab.

In modern Linux the first field (fs_spec) for the root FS does not have to be updated every time the device path or label or UUID is changed. To avoid being misled in the future replace the first field with the word "dummy".

Update the third field (fs_vfstype). Instead of "ext4" you can place either "btrfs" or "auto".

Update the fourth field (fs_mntops). IMPORTANT: remove `,errors=remount-ro`. It's not supported by btrfs. If kept, the OS will boot with a readonly root.

Update the sixth field (fs_passno). Instead of "1" enter "0" because fsck should not be run for btrfs.

Lastly, add the entry for the /boot partition. The final result can look like this:


    dummy / auto defaults,noatime,nodiratime,commit=600 0 0
    #UUID=f5f78a6a-fd43-489f-8c0b-0f46a631fe0b / ext4 defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1

    UUID=a3867f02-ce79-4a68-8ef7-8361fcc4c2a5 /boot ext4 defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 2

    tmpfs /tmp tmpfs defaults,nosuid 0 0

Unmount the partitions:

    umount /mnt/boot
    umount /mnt


Further steps: keeping the OS files on the default subvolume does not let you quickly switch between snapshots.
Probably create a root subvolume and make it the new default.

    btrfs sub snapshot / /initial_root

Linux can be instructed to boot from a non-default subvolume, but it's easier to just set another default subvolume:

    btrfs sub list /
    btrfs sub set-default NUMBER /


If you still want to boot from a non-default subvolume, the boot parameters need: `rootflags=subvol=subvolname`.
I haven't tried it yet, but to add this without recompiling boot.scr you can add a new line to `armbianEnv.txt`:

    extraargs=rootflags=subvol=subvolname

However, it's unclear what will happen when a new u-boot script is generated from the OS booted from the new default subvolume. Will it contain explicit rootflags? Running `mount` on such system shows `subvol=` among the mount flags.



The top-level subvolume has no name, but its id is always 5. It can be accessed as following:

    mount -t btrfs /dev/blahblag /mnt -osubvolid=5

After booting from a subvolume you can mount subvol 5 and move its direct children (except initial_root and ext2_saved) into the .todelete/ directory and delete it later.

Finally, install some btrfs backup package.
Now switching to a snapshot means creating a writable snapshot out of a readonly snapshot created by the backup software (`btrfs sub snapshot` without the '-r' flag).

The .sxbackup subvol created by the software can be moved with the `mv` command: `mv /mnt/volroot/.sxbackup /mnt/`.

To access .sxbackup when volroot is mounted as root you can add to fstab:

    UUID=blah-blah /.sxbackup btrfs nofail,subvol=.sxbackup





References:

https://forum.armbian.com/topic/16111-howto-btrfs-root-filesystem/

https://forum.armbian.com/topic/2369-btrfs-as-root-filesystem/

==== END BTRFS ========

==== BEGIN WiringPI/WiringOP =====

    git clone https://github.com/orangepi-xunlong/WiringOP
    cd WiringOP
    ./build clean
    ./build
    
    gpio readall

prints a table of the pins. Most have Mode=OFF by default.

https://orangepi.su/content.php?p=112

==== END WiringPI/WiringOP =====


==== BEGIN uart1 (/dev/ttyS1) =====

    less /boot/dtb/overlay/README.sun8i-h3-overlays
    
    vim /boot/armbianEnv.txt

Add the line if not present: `overlays=...`
Add the overlay: `overlays=uart1`

Save and reboot. Now `gpio readall` shows Mode=ALT2 for TXD.1 and RXD.1

The arrow (triangle) on the board marks pin1 on GPIO 40 pin.
On Orange Pi Lite GND, TXD.1, RXD.1 are pins 34,38,40 (see the scheme below):


        +OrangePiH3+----------+
        | Physical | Name     |
        +----++----+----------+
      > |  1 || 2  |          |
        |  3 || 4  |          |
        |  5 || 6  |          |
        |  7 || 8  |          |
        |  9 || 10 |          |
        | 11 || 12 |          |
        | 13 || 14 |          |
        | 15 || 16 |          |
        | 17 || 18 |          |
        | 19 || 20 |          |
        | 21 || 22 |          |
        | 23 || 24 |          |
        | 25 || 26 |          |
        | 27 || 28 |          |
        | 29 || 30 |          |
        | 31 || 32 |          |
        | 33 || 34 | GND      |
        | 35 || 36 |          |
        | 37 || 38 | TXD.1    |
        | 39 || 40 | RXD.1    |
        +----++----+----------+
        | Physical | Name     |
        +OrangePiH3+----------+




Optionally set the speed (unlike ttyS0 it's 9600 by default)

    stty -F /dev/ttyS1 115200


https://pcminipro.ru/orangepi/raspinovka-razemov-gpio-orange-pi/

https://4pda.ru/forum/index.php?showtopic=782242&view=findpost&p=60805497

The following did not work for me:

    Convert with `dtc` (part of pre-installed `device-tree-compiler`)
    
        cd /boot/dtb/
        dtc -I dtb -O dts -o sun8i-h3-orangepi-lite.dtb{.dts,}
        vim sun8i-h3-orangepi-lite.dtb.dts
    
    
    Find block:
        
                        serial@1c28400 {
                                compatible = "snps,dw-apb-uart";
                                reg = < 0x1c28400 0x400 >;
                                interrupts = < 0x00 0x01 0x04 >;
                                reg-shift = < 0x02 >;
                                reg-io-width = < 0x04 >;
                                clocks = < 0x03 0x3f >;
                                resets = < 0x03 0x32 >;
                                dmas = < 0x13 0x07 0x13 0x07 >;
                                dma-names = "rx\0tx";
                                status = "disabled";
                                phandle = < 0x64 >;
                        };
        
    
    Change `status = "disabled"` to `status = "okay"`
    
    Convert back:
    
        cp --backup=numbered sun8i-h3-orangepi-lite.dtb{,.save}
        dtc -I dts -O dtb -o sun8i-h3-orangepi-lite.dtb{,.dts}

==== END uart1 (/dev/ttyS1) =====

==== BEGIN DS18B20Z thermal sensor =====
The pin 1 is near the plus (+) sign on the chip (there're three lines of text printed on the top side; pin 1 is at the bottom left of the text).

          +----------+
         -|1(+)     8|-
         -|2        7|-
    Vdd  -|3        6|- 
    data -|4        5|- GND
          +----------+





==== END  DS18B20Z thermal sensor =====

==== BEGIN 1-Wire =====

    less /boot/dtb/overlay/README.sun8i-h3-overlays

Only those 1-wire devices are supported that can work with 3.3V.
Parasitic power didn't work with Raspberry. It probably doesn't work on Orange Pi.
Need an external 4k7 pull-up resistor (between the data and the 3.3V wires).
The default w1-gpio pin is PD14:

          o------------------------------------------------o----------o Vdd
          |      +----------+OrangePiH3+----------+        |
          |      |   Name   | Physical | Name     |      +-+-+
          |      +----------+----++----+----------+      |   |
          |      |          |  1 || 2  |          |      |   | 4k7
          |      |          |  3 || 4  |          |      |   |
          |      |          |  5 || 6  |          |      |   |
          |      |          |  7 || 8  |          |      +-+-+
          |      |          |  9 || 10 |          |        |  
          |      |          | 11 || 12 | PD14     |--------o----------o Data
          |      |          | 13 || 14 | GND      |-------------------o GND
          |      |          | 15 || 16 |          |
          o------|     3.3V | 17 || 18 |          |
                 |          | 19 || 20 |          |
                 |          | 21 || 22 |          |
                 |          | 23 || 24 |          |
                 |          | 25 || 26 |          |
                 |          | 27 || 28 |          |
                 |          | 29 || 30 |          |
                 |          | 31 || 32 |          |
                 |          | 33 || 34 |          |
                 |          | 35 || 36 |          |
                 |          | 37 || 38 |          |
                 |          | 39 || 40 |          |
                 +----------+----++----+----------+
                 |   Name   | Physical | Name     |
                 +----------+OrangePiH3+----------+

Enable w1-gpio
   
    vim /boot/armbianEnv.txt

Add the line if not present: `overlays=...`
Add the overlay: `overlays=w1-gpio`

    reboot

    gpio readall
      +OrangePiH3+---+------+----------+-----+------+
      | Physical | V | Mode | Name     | wPi | GPIO |
      +----++----+---+------+----------+-----+------+
      |  1 || 2  |   |      |          |     |      |
      |  3 || 4  |   |      |          |     |      |
      |  5 || 6  |   |      |          |     |      |
      |  7 || 8  |   |      |          |     |      |
      |  9 || 10 |   |      |          |     |      |
      | 11 || 12 | 1 | IN   | PD14     | 6   | 110  |


    lsmod | grep -E 'w1|wire'
      w1_therm               24576  0
      w1_gpio                16384  0
      wire                   32768  2 w1_gpio,w1_therm
      cn                     16384  1 wire

    dmesg | grep -E 'w1|wire'
      [    6.779019] Driver for 1-wire Dallas network protocol.
      [    6.787981] gpio-110 (onewire@0): enforced open drain please flag it properly in DT/ACPI DSDT/board file
      [    6.821971] w1_master_driver w1_bus_master1: Attaching one wire slave 28.00000c71ddc0 crc af

    ls -Al /sys/bus/w1/devices
      total 0
      lrwxrwxrwx 1 root root 0 Feb 23 16:41 28-00000c71ddc0 -> ../../../devices/w1_bus_master1/28-00000c71ddc0
      lrwxrwxrwx 1 root root 0 Feb 23 15:17 w1_bus_master1 -> ../../../devices/w1_bus_master1

    cat /sys/bus/w1/devices/28-00000c71ddc0/w1_slave
      79 01 4b 46 7f ff 07 10 0a : crc=0a YES
      79 01 4b 46 7f ff 07 10 0a t=23562

    "t=" is the temperature.

References:

https://micro-pi.ru/%D1%81%D1%87%D0%B8%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%82%D0%B5%D0%BC%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D1%83%D1%80%D1%8B-ds18b20-orange-pi/#_DS18B20_Orange_Pi_PC

==== END 1-Wire =====

==== BEGIN soctemp =====

After attaching an external thermal sensor the "CPU temp" line wrongly shows this sensor temperature.
It's because the unstable path `hwmon0/temp1_input` wins over the persistent path `virtual/thermal/thermal_zone0/temp` in `/usr/lib/armbian/armbian-hardware-monitor`:

        elif [[ -f /sys/class/hwmon/hwmon0/temp1_input && ${BOARDFAMILY} != "mvebu" ]]; then
                # usual convention with modern kernels
                ln -fs /sys/class/hwmon/hwmon0/temp1_input /etc/armbianmonitor/datasources/soctemp
        else
                # all other boards/kernels use the same sysfs node except of Actions Semi S500:
                [[ ${BOARDFAMILY} == s500 ]] && THERMAL_ZONE="thermal_zone1" || THERMAL_ZONE="thermal_zone0"
                ln -fs /sys/devices/virtual/thermal/${THERMAL_ZONE}/temp /etc/armbianmonitor/datasources/soctemp
        fi

To fix this add an extra condition near "mvebu" with our board family: sun8i

        elif [[ -f /sys/class/hwmon/hwmon0/temp1_input && ${BOARDFAMILY} != "mvebu" && ${BOARDFAMILY} != "sun8i" ]]; then
                # usual convention with modern kernels
                ln -fs /sys/class/hwmon/hwmon0/temp1_input /etc/armbianmonitor/datasources/soctemp

==== END soctemp =====


==== BEGIN Openvpn =====
Go to the VPN server

    cd /etc/openvpn/easy-rsa/
    source ./vars
    ./build-key client-smarthome

    echo "ifconfig-push 10.8.1.34 10.8.1.5" >/etc/openvpn/ccd/client-smarthome
    

Copy `/etc/openvpn/easy-rsa/keys/ca.crt`, `/etc/openvpn/easy-rsa/keys/client-smarthome.crt`, and `/etc/openvpn/easy-rsa/keys/client-smarthome.key` to Orange Pi into `/etc/openvpn/client/`

    chmod 600 /etc/openvpn/client/client-smarthome.key

    /etc/openvpn/client/smalldisk.conf
      client
      ...
      ca ./ca.crt
      cert ./client-smarthome.crt
      key ./client-smarthome.key

    systemctl start openvpn-client@smalldisk
    systemctl enable openvpn-client@smalldisk

==== END Openvpn =====


==== BEGIN pip3 =====
apt install python3-setuptools python3-wheel python3-pip


==== END pip3 =====

==== BEGIN btrfs-sxbackup =====

    pip3 install btrfs-sxbackup
    
    
    btrfs-sxbackup init /
    mount /dev/mmcblk0p2 /mnt -osubvolid=5
    mv /mnt/initial_root/.sxbackup /mnt/
    umount /mnt
    mkdir /.sxbackup
    
    echo "UUID=a3867f02-ce79-4a68-8ef7-8361fcc4c2a5 /.sxbackup btrfs nofail,subvol=.sxbackup" >>/etc/fstab
    
    mount /.sxbackup
    
    btrfs-sxbackup run /

# end of local snapshots

# remote backups

    # Need to destroy local configuration
    btrfs-sxbackup destroy /


Login to NAS

Mount a btrfs partition (/media/backups/)

Configure endpoint compression. /root/.ssh/config :

    Host smarthome
            Compression yes

Configure the SSH jump station if necessary. /root/.ssh/config :

    Host smarthome
            ProxyCommand ssh -oCompression=no -q nobody@jumpstation -W %h:%p


Make sure you can login to the board as cron:

    SSH_AUTH_SOCK= ssh://root@smarthome date

Configure

    SSH_AUTH_SOCK= btrfs-sxbackup init ssh://root@smarthome:/ /media/backups/smarthome/ -sr 3 -dr "1d:daily, 1w:weekly, 1m:monthly, 12m:none"

Run

    screen
    SSH_AUTH_SOCK= btrfs-sxbackup run /media/backups/smarthome/

Schedule

( set +o noclobber
cat <<'EOFCONF' >/etc/cron.d/btrfs-sxbackup
PATH="/usr/sbin:/usr/bin:/sbin:/bin"
30 2    * * *     root     ssh root@smarthome "rsync -a --delete /boot/ /boot-backup/" && btrfs-sxbackup --quiet run /media/backups/smarthome/
EOFCONF
) 


==== END btrfs-sxbackup =====

==== BEGIN watchdog =====

Check the files
/etc/default/watchdog
/etc/watchdog.conf

apt install watchdog

sync
echo 1 >/dev/watchdog
# wait to see if it reboots

/etc/watchdog.conf
Uncomment:
watchdog-device = /dev/watchdog

To eliminate "cannot set timeout 60 (errno = 22 = 'Invalid argument" add:
watchdog-timeout = 15


systemctl start watchdog

sync
#pkill -x watchdog
# wait to see if it reboots

# "enable" not needed because it's already in /etc/default/watchdog
#systemctl enable watchdog

You also need a software that reboots the board when it's offline (with a status file to prevent frequent reboots).



==== END watchdog =====

# enable PC04
gpio mode 9 OUT

# power on PC04
gpio write 9 1

# The following will freeze your board:
#gpio mode 9 OFF



owfs + w1_gpio
https://www.linux.org.ru/forum/general/12327772





apt install owserver owhttpd

/etc/owfs.conf
  #server: FAKE = DS18S20,DS2405
  server: w1


systemctl start owserver
systemctl start owhttpd
systemctl enable owserver
systemctl enable owhttpd

http://localhost:2121/

Set-up reverse proxy on a white ip
